#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var image_size_1 = require("image-size");
var sharp_1 = __importDefault(require("sharp"));
var meow_1 = __importDefault(require("meow"));
var SPLIT_TARGET_CHAR = ',';
var MIN_ACCEPT_IMAGE_RESOLUTION = 512;
var DEFAULT_WEBMANIFEST_PATH = 'public/manifest.webmanifest';
var DEFAULT_OUTPUT_PATH = 'public';
var DEFAULT_OUTPUT_SIZES = '512,384,192,180,152,144,128,96,72';
!(function () { return __awaiter(void 0, void 0, void 0, function () {
    var cli, iconDimension, ascendingOrder, outputSizes, _i, outputSizes_1, size, error_1, inputManifest, outputManifestContent;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cli = meow_1.default("\n  Usage\n    $ webmanifest --icon <filepath>\n\n  Options\n    --icon, -i Template icon file <required>\n    --manifest, -m Template webmanifest file\n    --output, -o Output directory path\n    --sizes, -s Output icon sizes\n\n  Examples\n    $ webmanifest --icon public/icon.svg\n    $ webmanifest --icon public/icon.svg --sizes 512,192,96,32,16\n  ", {
                    flags: {
                        icon: {
                            type: 'string',
                            alias: 'i'
                        },
                        manifest: {
                            type: 'string',
                            alias: 'm',
                            default: DEFAULT_WEBMANIFEST_PATH
                        },
                        output: {
                            type: 'string',
                            alias: 'o',
                            default: DEFAULT_OUTPUT_PATH
                        },
                        sizes: {
                            type: 'string',
                            alias: 's',
                            default: DEFAULT_OUTPUT_SIZES
                        }
                    }
                });
                return [4 /*yield*/, fs_extra_1.pathExists(cli.flags.icon)];
            case 1:
                if (!(_a.sent())) {
                    throw new Error(cli.flags.icon + " does not exists.");
                }
                return [4 /*yield*/, fs_extra_1.pathExists(cli.flags.manifest)];
            case 2:
                if (!(_a.sent())) {
                    throw new Error(cli.flags.manifest + " does not exists.");
                }
                return [4 /*yield*/, fs_extra_1.pathExists(cli.flags.output)];
            case 3:
                if (!(_a.sent())) {
                    throw new Error(cli.flags.output + " does not exists.");
                }
                iconDimension = image_size_1.imageSize(cli.flags.icon);
                if (!iconDimension.width || !iconDimension.height) {
                    throw new Error('Icon file is invalid.');
                }
                if (iconDimension.width !== iconDimension.height) {
                    throw new Error('Icon file is required its square.');
                }
                if (iconDimension.width && iconDimension.width < MIN_ACCEPT_IMAGE_RESOLUTION) {
                    throw new Error("Icon file is required larger than " + MIN_ACCEPT_IMAGE_RESOLUTION + "px.");
                }
                if (iconDimension.height && iconDimension.height < MIN_ACCEPT_IMAGE_RESOLUTION) {
                    throw new Error("Icon file is required larger than " + MIN_ACCEPT_IMAGE_RESOLUTION + "px.");
                }
                ascendingOrder = function (a, b) { return (a < b ? 1 : -1); };
                outputSizes = cli.flags.sizes.includes(SPLIT_TARGET_CHAR)
                    ? cli.flags.sizes
                        .split(SPLIT_TARGET_CHAR)
                        .map(Number)
                        .filter(Number)
                        .sort(ascendingOrder)
                    : [Number(cli.flags.sizes)].filter(Number);
                _a.label = 4;
            case 4:
                _a.trys.push([4, 9, , 10]);
                _i = 0, outputSizes_1 = outputSizes;
                _a.label = 5;
            case 5:
                if (!(_i < outputSizes_1.length)) return [3 /*break*/, 8];
                size = outputSizes_1[_i];
                return [4 /*yield*/, sharp_1.default(cli.flags.icon)
                        .resize(size, size)
                        .png()
                        .toFile(cli.flags.output + "/icon-" + size + "x" + size + ".png")];
            case 6:
                _a.sent();
                console.log("Output: " + cli.flags.output + "/icon-" + size + "x" + size + ".png");
                _a.label = 7;
            case 7:
                _i++;
                return [3 /*break*/, 5];
            case 8: return [3 /*break*/, 10];
            case 9:
                error_1 = _a.sent();
                throw error_1;
            case 10: return [4 /*yield*/, fs_extra_1.readJSON(cli.flags.manifest)];
            case 11:
                inputManifest = _a.sent();
                outputManifestContent = __assign(__assign({}, inputManifest), { icons: outputSizes.map(function (size) { return ({
                        src: "icon-" + size + "x" + size + ".png",
                        sizes: size + "x" + size,
                        type: 'image/png'
                    }); }) });
                return [4 /*yield*/, fs_extra_1.writeJSON(cli.flags.manifest, outputManifestContent, { spaces: 2 })];
            case 12:
                _a.sent();
                console.log("Output: " + cli.flags.manifest);
                console.log('\nðŸŽ‰ Done! All icons and manifest file is generated successfully.\n');
                return [2 /*return*/];
        }
    });
}); })();
